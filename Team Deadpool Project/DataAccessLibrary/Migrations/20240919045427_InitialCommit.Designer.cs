// <auto-generated />
using System;
using DataAccessLibrary.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLibrary.Migrations
{
    [DbContext(typeof(AquariumDataContext))]
    [Migration("20240919045427_InitialCommit")]
    partial class InitialCommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLibrary.Models.Animal", b =>
                {
                    b.Property<string>("AnimalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SpeciesID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("TankID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("VetID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.HasKey("AnimalID");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Aquariums", b =>
                {
                    b.Property<string>("AquariumID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Hours")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AquariumID");

                    b.ToTable("Aquariums");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Contacts", b =>
                {
                    b.Property<string>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.HasKey("ContactID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Guests", b =>
                {
                    b.Property<string>("GuestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AquariumID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GuestID");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.GuestsTickets", b =>
                {
                    b.Property<string>("GuestsTicketsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("GuestID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("TicketID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("guestsGuestID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("ticketsTicketID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.HasKey("GuestsTicketsID");

                    b.HasIndex("guestsGuestID");

                    b.HasIndex("ticketsTicketID");

                    b.ToTable("GuestsTickets");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Positions", b =>
                {
                    b.Property<string>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PositionID");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Species", b =>
                {
                    b.Property<string>("SpeciesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Colors")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Diet")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Habitat")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpeciesID");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.TankMovements", b =>
                {
                    b.Property<string>("MovementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AnimalID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("CurrentTank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastTank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("WhenMoved")
                        .HasColumnType("datetime2");

                    b.HasKey("MovementId");

                    b.HasIndex("AnimalID");

                    b.ToTable("TanksMovements");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Tanks", b =>
                {
                    b.Property<string>("TankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AquariumID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("TankID");

                    b.ToTable("Tanks");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Tickets", b =>
                {
                    b.Property<string>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.HasKey("TicketID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Vets", b =>
                {
                    b.Property<string>("VetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AquariumID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VetID");

                    b.HasIndex("ContactID");

                    b.ToTable("Vets");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Workers", b =>
                {
                    b.Property<string>("WorkerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AquariumID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PositionID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<int>("Years_of_Experience")
                        .HasColumnType("int");

                    b.HasKey("WorkerID");

                    b.HasIndex("ContactID");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.WorkersTanks", b =>
                {
                    b.Property<string>("WorkersTanksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("TankID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<string>("WorkerID")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.HasKey("WorkersTanksID");

                    b.HasIndex("TankID");

                    b.HasIndex("WorkerID");

                    b.ToTable("WorkersTanks");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.GuestsTickets", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Guests", "guests")
                        .WithMany("GuestsTickets")
                        .HasForeignKey("guestsGuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibrary.Models.Tickets", "tickets")
                        .WithMany("GuestsTickets")
                        .HasForeignKey("ticketsTicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("guests");

                    b.Navigation("tickets");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.TankMovements", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Animal", null)
                        .WithMany("TankMovements")
                        .HasForeignKey("AnimalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Vets", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Contacts", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Workers", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Contacts", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.WorkersTanks", b =>
                {
                    b.HasOne("DataAccessLibrary.Models.Tanks", "Tank")
                        .WithMany("WorkerTank")
                        .HasForeignKey("TankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLibrary.Models.Workers", "Worker")
                        .WithMany("WorkerTank")
                        .HasForeignKey("WorkerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tank");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Animal", b =>
                {
                    b.Navigation("TankMovements");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Guests", b =>
                {
                    b.Navigation("GuestsTickets");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Tanks", b =>
                {
                    b.Navigation("WorkerTank");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Tickets", b =>
                {
                    b.Navigation("GuestsTickets");
                });

            modelBuilder.Entity("DataAccessLibrary.Models.Workers", b =>
                {
                    b.Navigation("WorkerTank");
                });
#pragma warning restore 612, 618
        }
    }
}
